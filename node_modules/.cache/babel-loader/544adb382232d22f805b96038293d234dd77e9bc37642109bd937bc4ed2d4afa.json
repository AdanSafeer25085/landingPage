{"ast":null,"code":"import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\nconst sendToAnalytics = metric => {\n  // Log to console in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[Web Vitals] ${metric.name}:`, metric.value);\n\n    // Add performance warnings\n    switch (metric.name) {\n      case 'LCP':\n        if (metric.value > 2500) {\n          console.warn('[Performance] LCP is above 2.5s - Consider optimizing largest contentful paint');\n        }\n        break;\n      case 'FID':\n        if (metric.value > 100) {\n          console.warn('[Performance] FID is above 100ms - Consider optimizing JavaScript execution');\n        }\n        break;\n      case 'CLS':\n        if (metric.value > 0.1) {\n          console.warn('[Performance] CLS is above 0.1 - Consider fixing layout shifts');\n        }\n        break;\n      case 'FCP':\n        if (metric.value > 1800) {\n          console.warn('[Performance] FCP is above 1.8s - Consider optimizing first contentful paint');\n        }\n        break;\n      case 'TTFB':\n        if (metric.value > 800) {\n          console.warn('[Performance] TTFB is above 800ms - Consider optimizing server response time');\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Send to Google Analytics if available\n  if (window.gtag) {\n    window.gtag('event', metric.name, {\n      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n      event_category: 'Web Vitals',\n      event_label: metric.id,\n      non_interaction: true\n    });\n  }\n\n  // You can also send to your own analytics endpoint\n  // fetch('/api/analytics', {\n  //   method: 'POST',\n  //   headers: { 'Content-Type': 'application/json' },\n  //   body: JSON.stringify({\n  //     name: metric.name,\n  //     value: metric.value,\n  //     delta: metric.delta,\n  //     id: metric.id,\n  //     entries: metric.entries,\n  //   }),\n  // });\n};\nexport const measureWebVitals = () => {\n  getCLS(sendToAnalytics);\n  getFID(sendToAnalytics);\n  getFCP(sendToAnalytics);\n  getLCP(sendToAnalytics);\n  getTTFB(sendToAnalytics);\n};\n\n// Custom performance marks for specific actions\nexport const markPerformance = markName => {\n  if (performance.mark) {\n    performance.mark(markName);\n    console.log(`[Performance Mark] ${markName}`);\n  }\n};\n\n// Measure time between marks\nexport const measurePerformance = (measureName, startMark, endMark) => {\n  if (performance.measure) {\n    try {\n      performance.measure(measureName, startMark, endMark);\n      const measures = performance.getEntriesByName(measureName);\n      if (measures.length > 0) {\n        console.log(`[Performance Measure] ${measureName}: ${measures[0].duration}ms`);\n      }\n    } catch (error) {\n      console.error('Performance measurement error:', error);\n    }\n  }\n};\n\n// Monitor resource loading\nexport const monitorResources = () => {\n  if (window.PerformanceObserver) {\n    const observer = new PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'resource') {\n          if (entry.duration > 1000) {\n            console.warn(`[Slow Resource] ${entry.name} took ${entry.duration}ms to load`);\n          }\n        }\n      }\n    });\n    observer.observe({\n      entryTypes: ['resource']\n    });\n  }\n};\n\n// Initialize all monitoring\nexport const initPerformanceMonitoring = () => {\n  measureWebVitals();\n  monitorResources();\n\n  // Log initial page load time\n  window.addEventListener('load', () => {\n    const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n    console.log(`[Performance] Total page load time: ${loadTime}ms`);\n    if (loadTime > 3000) {\n      console.warn('[Performance] Page load time is above 3s - Consider further optimizations');\n    }\n  });\n};","map":{"version":3,"names":["getCLS","getFID","getFCP","getLCP","getTTFB","sendToAnalytics","metric","process","env","NODE_ENV","console","log","name","value","warn","window","gtag","Math","round","event_category","event_label","id","non_interaction","measureWebVitals","markPerformance","markName","performance","mark","measurePerformance","measureName","startMark","endMark","measure","measures","getEntriesByName","length","duration","error","monitorResources","PerformanceObserver","observer","list","entry","getEntries","entryType","observe","entryTypes","initPerformanceMonitoring","addEventListener","loadTime","timing","loadEventEnd","navigationStart"],"sources":["/Users/kpklaptops/Desktop/landingPage/src/utils/performanceMonitoring.js"],"sourcesContent":["import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\n\nconst sendToAnalytics = (metric) => {\n  // Log to console in development\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[Web Vitals] ${metric.name}:`, metric.value);\n    \n    // Add performance warnings\n    switch(metric.name) {\n      case 'LCP':\n        if (metric.value > 2500) {\n          console.warn('[Performance] LCP is above 2.5s - Consider optimizing largest contentful paint');\n        }\n        break;\n      case 'FID':\n        if (metric.value > 100) {\n          console.warn('[Performance] FID is above 100ms - Consider optimizing JavaScript execution');\n        }\n        break;\n      case 'CLS':\n        if (metric.value > 0.1) {\n          console.warn('[Performance] CLS is above 0.1 - Consider fixing layout shifts');\n        }\n        break;\n      case 'FCP':\n        if (metric.value > 1800) {\n          console.warn('[Performance] FCP is above 1.8s - Consider optimizing first contentful paint');\n        }\n        break;\n      case 'TTFB':\n        if (metric.value > 800) {\n          console.warn('[Performance] TTFB is above 800ms - Consider optimizing server response time');\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  // Send to Google Analytics if available\n  if (window.gtag) {\n    window.gtag('event', metric.name, {\n      value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n      event_category: 'Web Vitals',\n      event_label: metric.id,\n      non_interaction: true,\n    });\n  }\n\n  // You can also send to your own analytics endpoint\n  // fetch('/api/analytics', {\n  //   method: 'POST',\n  //   headers: { 'Content-Type': 'application/json' },\n  //   body: JSON.stringify({\n  //     name: metric.name,\n  //     value: metric.value,\n  //     delta: metric.delta,\n  //     id: metric.id,\n  //     entries: metric.entries,\n  //   }),\n  // });\n};\n\nexport const measureWebVitals = () => {\n  getCLS(sendToAnalytics);\n  getFID(sendToAnalytics);\n  getFCP(sendToAnalytics);\n  getLCP(sendToAnalytics);\n  getTTFB(sendToAnalytics);\n};\n\n// Custom performance marks for specific actions\nexport const markPerformance = (markName) => {\n  if (performance.mark) {\n    performance.mark(markName);\n    console.log(`[Performance Mark] ${markName}`);\n  }\n};\n\n// Measure time between marks\nexport const measurePerformance = (measureName, startMark, endMark) => {\n  if (performance.measure) {\n    try {\n      performance.measure(measureName, startMark, endMark);\n      const measures = performance.getEntriesByName(measureName);\n      if (measures.length > 0) {\n        console.log(`[Performance Measure] ${measureName}: ${measures[0].duration}ms`);\n      }\n    } catch (error) {\n      console.error('Performance measurement error:', error);\n    }\n  }\n};\n\n// Monitor resource loading\nexport const monitorResources = () => {\n  if (window.PerformanceObserver) {\n    const observer = new PerformanceObserver((list) => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'resource') {\n          if (entry.duration > 1000) {\n            console.warn(`[Slow Resource] ${entry.name} took ${entry.duration}ms to load`);\n          }\n        }\n      }\n    });\n    \n    observer.observe({ entryTypes: ['resource'] });\n  }\n};\n\n// Initialize all monitoring\nexport const initPerformanceMonitoring = () => {\n  measureWebVitals();\n  monitorResources();\n  \n  // Log initial page load time\n  window.addEventListener('load', () => {\n    const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n    console.log(`[Performance] Total page load time: ${loadTime}ms`);\n    \n    if (loadTime > 3000) {\n      console.warn('[Performance] Page load time is above 3s - Consider further optimizations');\n    }\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}