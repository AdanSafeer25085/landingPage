{"ast":null,"code":"import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\n\n// Performance thresholds\nconst PERFORMANCE_THRESHOLDS = {\n  LCP: 2500,\n  FID: 100,\n  CLS: 0.1,\n  FCP: 1800,\n  TTFB: 800\n};\n\n// Batch analytics calls for better performance\nlet analyticsQueue = [];\nlet isProcessing = false;\nconst processAnalyticsQueue = () => {\n  if (isProcessing || analyticsQueue.length === 0) return;\n  isProcessing = true;\n  const batch = analyticsQueue.splice(0);\n\n  // Process batch in next tick to avoid blocking UI\n  setTimeout(() => {\n    batch.forEach(metric => {\n      if (window.gtag) {\n        window.gtag('event', metric.name, {\n          value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n          event_category: 'Web Vitals',\n          event_label: metric.id,\n          non_interaction: true\n        });\n      }\n    });\n    isProcessing = false;\n  }, 0);\n};\nconst sendToAnalytics = metric => {\n  // Log to console in development (with throttling)\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[Web Vitals] ${metric.name}:`, metric.value);\n    const threshold = PERFORMANCE_THRESHOLDS[metric.name];\n    if (threshold && metric.value > threshold) {\n      console.warn(`[Performance] ${metric.name} is above ${threshold}${metric.name === 'CLS' ? '' : 'ms'} - Consider optimization`);\n    }\n  }\n\n  // Add to queue for batch processing\n  analyticsQueue.push(metric);\n\n  // Process queue with debouncing\n  requestIdleCallback ? requestIdleCallback(processAnalyticsQueue) : setTimeout(processAnalyticsQueue, 0);\n};\nexport const measureWebVitals = () => {\n  getCLS(sendToAnalytics);\n  getFID(sendToAnalytics);\n  getFCP(sendToAnalytics);\n  getLCP(sendToAnalytics);\n  getTTFB(sendToAnalytics);\n};\n\n// Custom performance marks for specific actions\nexport const markPerformance = markName => {\n  if (performance.mark) {\n    performance.mark(markName);\n    console.log(`[Performance Mark] ${markName}`);\n  }\n};\n\n// Measure time between marks\nexport const measurePerformance = (measureName, startMark, endMark) => {\n  if (performance.measure) {\n    try {\n      performance.measure(measureName, startMark, endMark);\n      const measures = performance.getEntriesByName(measureName);\n      if (measures.length > 0) {\n        console.log(`[Performance Measure] ${measureName}: ${measures[0].duration}ms`);\n      }\n    } catch (error) {\n      console.error('Performance measurement error:', error);\n    }\n  }\n};\n\n// Monitor resource loading\nexport const monitorResources = () => {\n  if (window.PerformanceObserver) {\n    const observer = new PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'resource') {\n          if (entry.duration > 1000) {\n            console.warn(`[Slow Resource] ${entry.name} took ${entry.duration}ms to load`);\n          }\n        }\n      }\n    });\n    observer.observe({\n      entryTypes: ['resource']\n    });\n  }\n};\n\n// Initialize all monitoring\nexport const initPerformanceMonitoring = () => {\n  measureWebVitals();\n  monitorResources();\n\n  // Log initial page load time using modern Navigation Timing API\n  window.addEventListener('load', () => {\n    // Use modern Navigation Timing API if available\n    if (performance.getEntriesByType && performance.getEntriesByType('navigation').length > 0) {\n      const navigationEntry = performance.getEntriesByType('navigation')[0];\n      const loadTime = navigationEntry.loadEventEnd - navigationEntry.fetchStart;\n      console.log(`[Performance] Total page load time: ${Math.round(loadTime)}ms`);\n      if (loadTime > 3000) {\n        console.warn('[Performance] Page load time is above 3s - Consider further optimizations');\n      }\n    } else {\n      // Fallback to deprecated API with suppression\n      try {\n        const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n        console.log(`[Performance] Total page load time: ${loadTime}ms (fallback)`);\n        if (loadTime > 3000) {\n          console.warn('[Performance] Page load time is above 3s - Consider further optimizations');\n        }\n      } catch (e) {\n        console.warn('[Performance] Could not measure page load time');\n      }\n    }\n  });\n};","map":{"version":3,"names":["getCLS","getFID","getFCP","getLCP","getTTFB","PERFORMANCE_THRESHOLDS","LCP","FID","CLS","FCP","TTFB","analyticsQueue","isProcessing","processAnalyticsQueue","length","batch","splice","setTimeout","forEach","metric","window","gtag","name","value","Math","round","event_category","event_label","id","non_interaction","sendToAnalytics","process","env","NODE_ENV","console","log","threshold","warn","push","requestIdleCallback","measureWebVitals","markPerformance","markName","performance","mark","measurePerformance","measureName","startMark","endMark","measure","measures","getEntriesByName","duration","error","monitorResources","PerformanceObserver","observer","list","entry","getEntries","entryType","observe","entryTypes","initPerformanceMonitoring","addEventListener","getEntriesByType","navigationEntry","loadTime","loadEventEnd","fetchStart","timing","navigationStart","e"],"sources":["/Users/kpklaptops/Desktop/landingPage/src/utils/performanceMonitoring.js"],"sourcesContent":["import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';\n\n// Performance thresholds\nconst PERFORMANCE_THRESHOLDS = {\n  LCP: 2500,\n  FID: 100,\n  CLS: 0.1,\n  FCP: 1800,\n  TTFB: 800\n};\n\n// Batch analytics calls for better performance\nlet analyticsQueue = [];\nlet isProcessing = false;\n\nconst processAnalyticsQueue = () => {\n  if (isProcessing || analyticsQueue.length === 0) return;\n  \n  isProcessing = true;\n  const batch = analyticsQueue.splice(0);\n  \n  // Process batch in next tick to avoid blocking UI\n  setTimeout(() => {\n    batch.forEach(metric => {\n      if (window.gtag) {\n        window.gtag('event', metric.name, {\n          value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n          event_category: 'Web Vitals',\n          event_label: metric.id,\n          non_interaction: true,\n        });\n      }\n    });\n    isProcessing = false;\n  }, 0);\n};\n\nconst sendToAnalytics = (metric) => {\n  // Log to console in development (with throttling)\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[Web Vitals] ${metric.name}:`, metric.value);\n    \n    const threshold = PERFORMANCE_THRESHOLDS[metric.name];\n    if (threshold && metric.value > threshold) {\n      console.warn(`[Performance] ${metric.name} is above ${threshold}${metric.name === 'CLS' ? '' : 'ms'} - Consider optimization`);\n    }\n  }\n\n  // Add to queue for batch processing\n  analyticsQueue.push(metric);\n  \n  // Process queue with debouncing\n  requestIdleCallback ? requestIdleCallback(processAnalyticsQueue) : setTimeout(processAnalyticsQueue, 0);\n};\n\nexport const measureWebVitals = () => {\n  getCLS(sendToAnalytics);\n  getFID(sendToAnalytics);\n  getFCP(sendToAnalytics);\n  getLCP(sendToAnalytics);\n  getTTFB(sendToAnalytics);\n};\n\n// Custom performance marks for specific actions\nexport const markPerformance = (markName) => {\n  if (performance.mark) {\n    performance.mark(markName);\n    console.log(`[Performance Mark] ${markName}`);\n  }\n};\n\n// Measure time between marks\nexport const measurePerformance = (measureName, startMark, endMark) => {\n  if (performance.measure) {\n    try {\n      performance.measure(measureName, startMark, endMark);\n      const measures = performance.getEntriesByName(measureName);\n      if (measures.length > 0) {\n        console.log(`[Performance Measure] ${measureName}: ${measures[0].duration}ms`);\n      }\n    } catch (error) {\n      console.error('Performance measurement error:', error);\n    }\n  }\n};\n\n// Monitor resource loading\nexport const monitorResources = () => {\n  if (window.PerformanceObserver) {\n    const observer = new PerformanceObserver((list) => {\n      for (const entry of list.getEntries()) {\n        if (entry.entryType === 'resource') {\n          if (entry.duration > 1000) {\n            console.warn(`[Slow Resource] ${entry.name} took ${entry.duration}ms to load`);\n          }\n        }\n      }\n    });\n    \n    observer.observe({ entryTypes: ['resource'] });\n  }\n};\n\n// Initialize all monitoring\nexport const initPerformanceMonitoring = () => {\n  measureWebVitals();\n  monitorResources();\n  \n  // Log initial page load time using modern Navigation Timing API\n  window.addEventListener('load', () => {\n    // Use modern Navigation Timing API if available\n    if (performance.getEntriesByType && performance.getEntriesByType('navigation').length > 0) {\n      const navigationEntry = performance.getEntriesByType('navigation')[0];\n      const loadTime = navigationEntry.loadEventEnd - navigationEntry.fetchStart;\n      console.log(`[Performance] Total page load time: ${Math.round(loadTime)}ms`);\n      \n      if (loadTime > 3000) {\n        console.warn('[Performance] Page load time is above 3s - Consider further optimizations');\n      }\n    } else {\n      // Fallback to deprecated API with suppression\n      try {\n        const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n        console.log(`[Performance] Total page load time: ${loadTime}ms (fallback)`);\n        \n        if (loadTime > 3000) {\n          console.warn('[Performance] Page load time is above 3s - Consider further optimizations');\n        }\n      } catch (e) {\n        console.warn('[Performance] Could not measure page load time');\n      }\n    }\n  });\n};"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,OAAO,QAAQ,YAAY;;AAEpE;AACA,MAAMC,sBAAsB,GAAG;EAC7BC,GAAG,EAAE,IAAI;EACTC,GAAG,EAAE,GAAG;EACRC,GAAG,EAAE,GAAG;EACRC,GAAG,EAAE,IAAI;EACTC,IAAI,EAAE;AACR,CAAC;;AAED;AACA,IAAIC,cAAc,GAAG,EAAE;AACvB,IAAIC,YAAY,GAAG,KAAK;AAExB,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAClC,IAAID,YAAY,IAAID,cAAc,CAACG,MAAM,KAAK,CAAC,EAAE;EAEjDF,YAAY,GAAG,IAAI;EACnB,MAAMG,KAAK,GAAGJ,cAAc,CAACK,MAAM,CAAC,CAAC,CAAC;;EAEtC;EACAC,UAAU,CAAC,MAAM;IACfF,KAAK,CAACG,OAAO,CAACC,MAAM,IAAI;MACtB,IAAIC,MAAM,CAACC,IAAI,EAAE;QACfD,MAAM,CAACC,IAAI,CAAC,OAAO,EAAEF,MAAM,CAACG,IAAI,EAAE;UAChCC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACN,MAAM,CAACG,IAAI,KAAK,KAAK,GAAGH,MAAM,CAACI,KAAK,GAAG,IAAI,GAAGJ,MAAM,CAACI,KAAK,CAAC;UAC7EG,cAAc,EAAE,YAAY;UAC5BC,WAAW,EAAER,MAAM,CAACS,EAAE;UACtBC,eAAe,EAAE;QACnB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IACFjB,YAAY,GAAG,KAAK;EACtB,CAAC,EAAE,CAAC,CAAC;AACP,CAAC;AAED,MAAMkB,eAAe,GAAIX,MAAM,IAAK;EAClC;EACA,IAAIY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1CC,OAAO,CAACC,GAAG,CAAC,gBAAgBhB,MAAM,CAACG,IAAI,GAAG,EAAEH,MAAM,CAACI,KAAK,CAAC;IAEzD,MAAMa,SAAS,GAAG/B,sBAAsB,CAACc,MAAM,CAACG,IAAI,CAAC;IACrD,IAAIc,SAAS,IAAIjB,MAAM,CAACI,KAAK,GAAGa,SAAS,EAAE;MACzCF,OAAO,CAACG,IAAI,CAAC,iBAAiBlB,MAAM,CAACG,IAAI,aAAac,SAAS,GAAGjB,MAAM,CAACG,IAAI,KAAK,KAAK,GAAG,EAAE,GAAG,IAAI,0BAA0B,CAAC;IAChI;EACF;;EAEA;EACAX,cAAc,CAAC2B,IAAI,CAACnB,MAAM,CAAC;;EAE3B;EACAoB,mBAAmB,GAAGA,mBAAmB,CAAC1B,qBAAqB,CAAC,GAAGI,UAAU,CAACJ,qBAAqB,EAAE,CAAC,CAAC;AACzG,CAAC;AAED,OAAO,MAAM2B,gBAAgB,GAAGA,CAAA,KAAM;EACpCxC,MAAM,CAAC8B,eAAe,CAAC;EACvB7B,MAAM,CAAC6B,eAAe,CAAC;EACvB5B,MAAM,CAAC4B,eAAe,CAAC;EACvB3B,MAAM,CAAC2B,eAAe,CAAC;EACvB1B,OAAO,CAAC0B,eAAe,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMW,eAAe,GAAIC,QAAQ,IAAK;EAC3C,IAAIC,WAAW,CAACC,IAAI,EAAE;IACpBD,WAAW,CAACC,IAAI,CAACF,QAAQ,CAAC;IAC1BR,OAAO,CAACC,GAAG,CAAC,sBAAsBO,QAAQ,EAAE,CAAC;EAC/C;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,kBAAkB,GAAGA,CAACC,WAAW,EAAEC,SAAS,EAAEC,OAAO,KAAK;EACrE,IAAIL,WAAW,CAACM,OAAO,EAAE;IACvB,IAAI;MACFN,WAAW,CAACM,OAAO,CAACH,WAAW,EAAEC,SAAS,EAAEC,OAAO,CAAC;MACpD,MAAME,QAAQ,GAAGP,WAAW,CAACQ,gBAAgB,CAACL,WAAW,CAAC;MAC1D,IAAII,QAAQ,CAACpC,MAAM,GAAG,CAAC,EAAE;QACvBoB,OAAO,CAACC,GAAG,CAAC,yBAAyBW,WAAW,KAAKI,QAAQ,CAAC,CAAC,CAAC,CAACE,QAAQ,IAAI,CAAC;MAChF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIlC,MAAM,CAACmC,mBAAmB,EAAE;IAC9B,MAAMC,QAAQ,GAAG,IAAID,mBAAmB,CAAEE,IAAI,IAAK;MACjD,KAAK,MAAMC,KAAK,IAAID,IAAI,CAACE,UAAU,CAAC,CAAC,EAAE;QACrC,IAAID,KAAK,CAACE,SAAS,KAAK,UAAU,EAAE;UAClC,IAAIF,KAAK,CAACN,QAAQ,GAAG,IAAI,EAAE;YACzBlB,OAAO,CAACG,IAAI,CAAC,mBAAmBqB,KAAK,CAACpC,IAAI,SAASoC,KAAK,CAACN,QAAQ,YAAY,CAAC;UAChF;QACF;MACF;IACF,CAAC,CAAC;IAEFI,QAAQ,CAACK,OAAO,CAAC;MAAEC,UAAU,EAAE,CAAC,UAAU;IAAE,CAAC,CAAC;EAChD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,yBAAyB,GAAGA,CAAA,KAAM;EAC7CvB,gBAAgB,CAAC,CAAC;EAClBc,gBAAgB,CAAC,CAAC;;EAElB;EACAlC,MAAM,CAAC4C,gBAAgB,CAAC,MAAM,EAAE,MAAM;IACpC;IACA,IAAIrB,WAAW,CAACsB,gBAAgB,IAAItB,WAAW,CAACsB,gBAAgB,CAAC,YAAY,CAAC,CAACnD,MAAM,GAAG,CAAC,EAAE;MACzF,MAAMoD,eAAe,GAAGvB,WAAW,CAACsB,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;MACrE,MAAME,QAAQ,GAAGD,eAAe,CAACE,YAAY,GAAGF,eAAe,CAACG,UAAU;MAC1EnC,OAAO,CAACC,GAAG,CAAC,uCAAuCX,IAAI,CAACC,KAAK,CAAC0C,QAAQ,CAAC,IAAI,CAAC;MAE5E,IAAIA,QAAQ,GAAG,IAAI,EAAE;QACnBjC,OAAO,CAACG,IAAI,CAAC,2EAA2E,CAAC;MAC3F;IACF,CAAC,MAAM;MACL;MACA,IAAI;QACF,MAAM8B,QAAQ,GAAGxB,WAAW,CAAC2B,MAAM,CAACF,YAAY,GAAGzB,WAAW,CAAC2B,MAAM,CAACC,eAAe;QACrFrC,OAAO,CAACC,GAAG,CAAC,uCAAuCgC,QAAQ,eAAe,CAAC;QAE3E,IAAIA,QAAQ,GAAG,IAAI,EAAE;UACnBjC,OAAO,CAACG,IAAI,CAAC,2EAA2E,CAAC;QAC3F;MACF,CAAC,CAAC,OAAOmC,CAAC,EAAE;QACVtC,OAAO,CAACG,IAAI,CAAC,gDAAgD,CAAC;MAChE;IACF;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}